{"version":3,"sources":["index.js","Calculator.js"],"names":["ReactDOM","render","StrictMode","document","getElementById","statesConst","initial","number","operator","negativeOperand","evaluated","isLastSign","str","endsWith","buttons","buttonId","name","FormulaValue","props","id","formula","OutputValue","output","Clickable","className","onClick","Display","Calculator","state","calculatorState","decimalOperandFlag","handleClick","bind","event","buttonItem","find","item","target","this","undefined","Math","round","eval","slice","console","log","setState","buttonMap","map","React","Component"],"mappings":"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","file":"static/js/main.656c25f9.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import React from 'react';\r\n\r\nconst statesConst = {\r\n    initial: 0,\r\n    number: 1,\r\n    operator: 2,\r\n    negativeOperand: 3,\r\n    evaluated: 4\r\n};\r\n\r\nfunction isLastSign(str) {\r\n    return str.endsWith('+') || str.endsWith('-') || str.endsWith('*') || str.endsWith('/');\r\n}\r\n\r\nconst buttons = [\r\n    {buttonId: \"clear\", name: \"AC\"},\r\n    {buttonId: \"divide\", name: \"/\"},\r\n    {buttonId: \"seven\", name: \"7\"},\r\n    {buttonId: \"eight\", name: \"8\"},\r\n    {buttonId: \"nine\", name: \"9\"},\r\n    {buttonId: \"multiply\", name: \"*\"},\r\n    {buttonId: \"four\", name: \"4\"},\r\n    {buttonId: \"five\", name: \"5\"},\r\n    {buttonId: \"six\", name: \"6\"},\r\n    {buttonId: \"subtract\", name: \"-\"},\r\n    {buttonId: \"one\", name: \"1\"},\r\n    {buttonId: \"two\", name: \"2\"},\r\n    {buttonId: \"three\", name: \"3\"},\r\n    {buttonId: \"add\", name: \"+\"},\r\n    {buttonId: \"zero\", name: \"0\"},\r\n    {buttonId: \"decimal\", name: \".\"},\r\n    {buttonId: \"equals\", name: \"=\"}];\r\n\r\nfunction FormulaValue(props) {\r\n    return <div id=\"formula\">{props.formula}</div>;\r\n}\r\n\r\nfunction OutputValue(props) {\r\n    return <div id=\"display\">{props.output}</div>;\r\n}\r\n\r\nfunction Clickable(props) {\r\n    return (<button className=\"clickable\" id={props.buttonId} onClick={props.onClick}>{props.name}</button>);\r\n}\r\n\r\nfunction Display(props) {\r\n    return <div id=\"tablo\">\r\n        <FormulaValue formula={props.formula}/>\r\n        <OutputValue output={props.output}/>\r\n    </div>;\r\n}\r\n\r\nexport default class Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            output: \"0\",\r\n            formula: \"\",\r\n            calculatorState: statesConst.initial,\r\n            decimalOperandFlag: false\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event) {\r\n        let buttonItem = buttons.find((item) => {\r\n            if (item.buttonId === event.target.id) {\r\n                return true;\r\n            }\r\n        });\r\n        /* handle only button click event*/\r\n        let calculatorState = this.state.calculatorState;\r\n        let output = this.state.output;\r\n        let formula = this.state.formula;\r\n        let decimalOperandFlag = this.state.decimalOperandFlag;\r\n        if (undefined !== buttonItem) {\r\n            switch (event.target.id) {\r\n                case \"clear\":\r\n                    output = \"0\";\r\n                    formula = \"\";\r\n                    calculatorState = statesConst.initial;\r\n                    decimalOperandFlag = false;\r\n                    break;\r\n                case \"equals\":\r\n                    if (this.state.calculatorState === statesConst.evaluated) {\r\n                        break;\r\n                    }\r\n                    output = Math.round(eval(this.state.formula) * 10000) / 10000;\r\n                    formula = this.state.formula + buttonItem.name + output;\r\n                    calculatorState = statesConst.evaluated;\r\n                    break;\r\n                case \"decimal\":\r\n                    if (this.state.calculatorState === statesConst.evaluated) {\r\n                        break;\r\n                    }\r\n                    calculatorState = statesConst.number;\r\n                    decimalOperandFlag = true;\r\n                    if (!this.state.decimalOperandFlag) {\r\n                        switch (this.state.calculatorState) {\r\n                            case statesConst.initial:\r\n                            case statesConst.operator:\r\n                            case statesConst.negativeOperand:\r\n                                formula = this.state.formula + '0.';\r\n                                output = '0.';\r\n                                break;\r\n                            case statesConst.number:\r\n                                formula = this.state.formula + '.';\r\n                                output = this.state.output + '.';\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"add\":\r\n                case \"multiply\":\r\n                case \"divide\":\r\n                    calculatorState = statesConst.operator;\r\n                    decimalOperandFlag = false;\r\n                    if (this.state.calculatorState === statesConst.evaluated) {\r\n                        formula = this.state.output + buttonItem.name;\r\n                        break;\r\n                    }\r\n                    if (this.state.calculatorState === statesConst.initial) {\r\n                        formula = '0';\r\n                    } else if (this.state.calculatorState === statesConst.operator || statesConst.negativeOperand === this.state.calculatorState) {\r\n                        formula = this.state.formula.slice(0, -1);\r\n                        console.log(formula);\r\n                        if (isLastSign(formula)) {\r\n                            formula = formula.slice(0, -1);\r\n                            console.log(formula);\r\n                        }\r\n                        formula += buttonItem.name;\r\n                        break;\r\n                    }\r\n                    formula = this.state.formula + buttonItem.name;\r\n                    break;\r\n                case \"subtract\":\r\n                    decimalOperandFlag = false;\r\n                    calculatorState = statesConst.negativeOperand;\r\n                    if (this.state.calculatorState === statesConst.evaluated) {\r\n                        formula = this.state.output + buttonItem.name;\r\n                        break;\r\n                    }\r\n                    if (this.state.calculatorState === statesConst.initial) {\r\n                        formula = '0';\r\n                    } else if (this.state.calculatorState === statesConst.negativeOperand) {\r\n                        formula = this.state.formula(0, -1) + buttonItem.name;\r\n                        break;\r\n                    }\r\n                    formula = this.state.formula + buttonItem.name;\r\n                    break;\r\n                default:\r\n                    if (this.state.calculatorState === statesConst.evaluated) {\r\n                        break;\r\n                    }\r\n                    calculatorState = statesConst.number;\r\n                    switch (this.state.calculatorState) {\r\n                        case statesConst.initial:\r\n                            output = buttonItem.name;\r\n                            formula = buttonItem.name;\r\n                            break;\r\n                        case statesConst.number:\r\n                            if (this.state.output !== '0') {\r\n                                output = this.state.output + buttonItem.name;\r\n                                formula = this.state.formula + buttonItem.name;\r\n                            } else {\r\n                                output = buttonItem.name;\r\n                                formula = this.state.formula.slice(0, -1) + buttonItem.name;\r\n                            }\r\n                            break;\r\n                        case statesConst.operator:\r\n                            output = buttonItem.name;\r\n                            formula = this.state.formula + buttonItem.name;\r\n                            break;\r\n                        case statesConst.negativeOperand:\r\n                            output = '-' + buttonItem.name;\r\n                            formula = this.state.formula + buttonItem.name;\r\n                            break;\r\n                    }\r\n            }\r\n            this.setState(\r\n                {\r\n                    output: output,\r\n                    formula: formula,\r\n                    calculatorState: calculatorState,\r\n                    decimalOperandFlag: decimalOperandFlag\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const buttonMap = buttons.map((item) => {\r\n            return <Clickable buttonId={item.buttonId} name={item.name} onClick={this.handleClick}/>;\r\n        });\r\n        return (<div className=\"calculator\">\r\n            <Display output={this.state.output} formula={this.state.formula}/>\r\n            {buttonMap}\r\n        </div>);\r\n    }\r\n}"],"sourceRoot":""}